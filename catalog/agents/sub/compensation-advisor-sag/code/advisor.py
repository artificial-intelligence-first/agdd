"""
CompensationAdvisorSAG - Sub-agent for compensation recommendations

Analyzes candidate profiles and generates compensation offers using
salary band lookup skill and compensation logic.
"""

from __future__ import annotations

import time
from typing import Any, Dict


async def run(payload: Dict[str, Any], *, skills=None, obs=None) -> Dict[str, Any]:
    """
    Generate compensation offer for a candidate.

    Args:
        payload: {"candidate_profile": {...}} conforming to comp_advisor_input schema
        skills: Skill runtime for executing salary-band-lookup
        obs: Observability logger

    Returns:
        {"offer": {...}} conforming to comp_advisor_output schema
    """
    t0 = time.time()

    if obs:
        obs.log("start", {"agent": "CompensationAdvisorSAG"})

    # Extract candidate profile
    profile = payload.get("candidate_profile", payload)
    role = profile.get("role", "Unknown Role")
    level = profile.get("level", "")
    location = profile.get("location", "")
    experience_years = profile.get("experience_years", 0)

    # 1) Lookup salary band via skill
    band = {}
    if skills and skills.exists("skill.salary-band-lookup"):
        try:
            band = await skills.invoke_async(
                "skill.salary-band-lookup",
                {"role": role, "level": level, "location": location},
            )
            if obs:
                obs.log("skill_invoked", {"skill": "salary-band-lookup", "band": band})
        except Exception as e:
            if obs:
                obs.log("skill_error", {"skill": "salary-band-lookup", "error": str(e)})
            # Fallback to default band
            band = {"currency": "USD", "min": 100000, "max": 180000, "source": "fallback"}
    else:
        # Fallback when skill not available
        band = {"currency": "USD", "min": 100000, "max": 180000, "source": "fallback"}

    # 2) Calculate base salary (midpoint strategy)
    currency = band.get("currency", "USD")
    min_salary = band.get("min", 100000)
    max_salary = band.get("max", 180000)

    # Adjust based on experience
    band_range = max_salary - min_salary
    experience_factor = min(experience_years / 10.0, 0.8)  # Cap at 80% of range
    base_amount = int(min_salary + (band_range * (0.2 + experience_factor)))

    # 3) Calculate sign-on bonus (simplified logic)
    sign_on_amount = 10000
    if "Senior" in role or "Senior" in level:
        sign_on_amount = 20000
    elif "Staff" in role or "Staff" in level:
        sign_on_amount = 30000
    elif "Principal" in role or "Principal" in level:
        sign_on_amount = 50000

    # 4) Build offer structure
    offer = {
        "role": role,
        "base_salary": {"currency": currency, "amount": base_amount},
        "band": band,
        "sign_on_bonus": {"currency": currency, "amount": sign_on_amount},
        "notes": f"Generated by CompensationAdvisorSAG based on {band.get('source', 'unknown')} data",
    }

    # 5) Observability
    duration_ms = int((time.time() - t0) * 1000)
    if obs:
        obs.metric("duration_ms", duration_ms)
        obs.log("end", {"status": "success", "offer_generated": True})

    return {"offer": offer}
